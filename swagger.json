{
  "openapi": "3.0.0",
  "info": {
    "title": "Blogs API",
    "description": "Este é um projeto RESTful API, implementado em NodeJs e TypeScript. Neste projeto é possível realizar um CRUD de operações simulando uma concessionária. Foi utilizado o Atla MongoDb e Docker. Acesse o repositório [Car Shop Github repository](https://github.com/vschagas/Car_Shop_MondoDB_POO) para mais informações!",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "http://localhost:3001",
      "description": "Local server"
    }
  ],
  "paths": {
    "/cars": {
      "post": {
        "summary": "Create new Car",
        "description": "Create a new car with the input data",
        "tags": ["Cars"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/newCar"
              },
              "example": {
                "model": "Uno com Escada",
                "year": 2002,
                "color": "Black",
                "status": true,
                "buyValue": 15.990,
                "doorsQty": 4,
                "seatsQty": 5
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/createdCar"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      },
      "get": {  
        "summary": "Find all Cars",
        "tags": ["Cars"],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/findAllCars"
                }
              }
            }
          },
          "400": {
            "description": "Bad Requestr"
          }
        }
      }
    },
    "/cars/{id}": {
      "get": {
        "summary": "Find Car by ID",
        "description": "Returns car based on ID",
        "tags": ["Cars"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "user ID",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/newCar"
              },
              "example": {
                "model": "Uno com Escada",
                "year": 2002,
                "color": "Black",
                "status": true,
                "buyValue": 15.990,
                "doorsQty": 4,
                "seatsQty": 5
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/createdCar"
                }
              }
            }
          },
          "404": {
            "description": "Car Not Found"
          },
          "422": {
            "description": "Invalid Mongo id"
          }
        }
      },
      "put": {
        "summary": "Update a Car",
        "description": "Update a car with the input data",
        "tags": ["Cars"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "user ID",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createdCar"
              },
              "example": {
                "model": "Uno com Escada",
                "year": 2002,
                "color": "Black",
                "status": true,
                "buyValue": 15.990,
                "doorsQty": 4,
                "seatsQty": 5
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/createdCar"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Car Not Found"
          },
          "422": {
            "description": "Invalid Mongo id"
          }
        }
      },
      "delete": {
        "summary": "Delete a Car based on ID",
        "description": "Delete a car",
        "tags": ["Cars"],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Car Not Found"
          },
          "422": {
            "description": "Invalid mongo id"
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Cars",
      "description": "Cars endpoints"
    },
    {
      "name": "Motorcycles",
      "description": "Motorcycle endpoints"
    }

  ],
  "components": {
    "schemas": {    
      "newCar": {
        "type": "object",
        "properties": {
          "model": { "type": "string"},
          "year": {"type": "number"},
          "color": { "type": "string"},
          "status": {"type": "boolean"},
          "buyValue": {"type": "number"},
          "doorsQty": {"type": "number"},
          "seatsQty": {"type": "number"}
        }
      },
      "createdCar": {
        "type": "object",
        "properties": {
          "id": {"type":"string"},
          "model": { "type": "string"},
          "year": {"type": "number"},
          "color": { "type": "string"},
          "status": {"type": "boolean"},
          "buyValue": {"type": "number"},
          "doorsQty": {"type": "number"},
          "seatsQty": {"type": "number"}
        }
      },
      "findAllCars": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "id": {"type":"string"},
            "model": { "type": "string"},
            "year": {"type": "number"},
            "color": { "type": "string"},
            "status": {"type": "boolean"},
            "buyValue": {"type": "number"},
            "doorsQty": {"type": "number"},
            "seatsQty": {"type": "number"}
          }
        }
      }
    }
  }
}